const { Server } = require('../models')
const node_ssh = require('node-ssh')
const co = require('bluebird').coroutine

function getAuthorizedKeys(ssh){
  return ssh.execCommand('cat .ssh/authorized_keys').then(function(res){
    if(res.code == 1) throw new Error(res.stderr)
    return res.stdout
  })
}

function saveAuthorizedKeys(ssh, combinedAuthorizedKeys){
  return ssh.execCommand(`echo '${combinedAuthorizedKeys}' > .ssh/authorized_keys`)
    .then(function(res){
      console.log(res)
    })
}

function populateAuthorizedKeys(server, authorized_keys){
  const obol_break = "\n###Keys below are auto-generated by OBOL###\n"

  let split = authorized_keys.split(obol_break)

  let obol_keys = server._users_with_access.map( user => user.pubKey )

  split[1] = obol_keys.join("\n")

  return split.join(obol_break)
}


module.exports = co( function *(){
  const ssh = new node_ssh()

  let server = yield Server
    .findOne({ status: 'pending' })
    .populate('_owner _users_with_access')

  if(!server) return console.log('no servers to generate authorized keys for')

  ssh.connect({
      host: server.host,
      username: server.username,
      privateKey: server.key.private
    })
    .then(getAuthorizedKeys, function(error){
      server.status = 'down'
      console.log(error)
    })
    .then(populateAuthorizedKeys.bind(null, server))
    .then(function(combined){
      return saveAuthorizedKeys(ssh, combined)
    })
    .then(function(){
      server.status = 'ready'
      return server.save( err => console.log('server ready') )
    })
    .then(function(){
      console.log('done')
    })
    .catch(function(err){
      console.log(err)
    })
})